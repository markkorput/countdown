// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.CountGrid = (function(_super) {
    __extends(CountGrid, _super);

    function CountGrid() {
      _ref = CountGrid.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CountGrid.prototype.initialize = function() {
      var _this = this;
      this.destroy();
      this.on('change:shown', function(model, value, obj) {
        return model.trigger({
          "true": 'show',
          "false": 'hide'
        }[value], model);
      });
      this.on('show', function(model) {
        if (!model.get('meshes')) {
          model.set({
            meshes: model._generateMeshes()
          });
        }
        if (model.get('scene')) {
          return _.each(model.get('meshes') || [], function(mesh) {
            return model.get('scene').add(mesh);
          });
        }
      });
      this.on('change:meshes', function(model, value, obj) {
        var s;
        if (s = model.get('scene')) {
          return _.each(model.previous('meshes') || [], function(mesh) {
            return s.remove(mesh);
          });
        }
      });
      this.on('hide', function(model) {
        var s;
        if (s = model.get('scene')) {
          return _.each(model.get('meshes') || [], function(mesh) {
            return s.remove(mesh);
          });
        }
      });
      this.on('change:color', function(model, value, obj) {
        return _.each(model.get('meshes') || [], function(mesh) {
          if (mesh.material) {
            return mesh.material.color = value;
          }
        });
      });
      this.on('change:meshes', (function(model, value, obj) {
        return _this.reposition(value);
      }), this);
      this.get('count').on('show', this.show, this);
      this.get('count').on('hide', this.hide, this);
      if (this.get('shown') === void 0) {
        return this.hide();
      }
    };

    CountGrid.prototype.destroy = function() {
      this.trigger('destroy');
      this.hide();
      return CountGrid.__super__.destroy.call(this);
    };

    CountGrid.prototype._generateMeshes = function() {
      var meshes,
        _this = this;
      meshes = _.map(_.range(this.get('rows') || 3), function(row, cidx, clist) {
        return _.map(_.range(_this.get('cols') || 3), function(col, cidx, clist) {
          var mesh;
          mesh = _this.get('count').get('mesh').clone();
          mesh.rotation.set(0, 0, 0);
          mesh.scale.set(1, 1, 1);
          return mesh;
        });
      });
      return _.flatten(meshes);
    };

    CountGrid.prototype.hide = function() {
      return this.set({
        shown: false
      });
    };

    CountGrid.prototype.show = function() {
      return this.set({
        shown: true
      });
    };

    CountGrid.prototype.reposition = function(meshes) {
      var _this = this;
      return _.each(meshes, function(mesh, idx, list) {
        return mesh.position.set(list.length / -2 + idx * 100, 0, _this.get('camera').position.z - 500);
      });
    };

    return CountGrid;

  })(Backbone.Model);

}).call(this);
