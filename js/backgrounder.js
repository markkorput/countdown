// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Backgrounder = (function(_super) {
    __extends(Backgrounder, _super);

    function Backgrounder() {
      _ref = Backgrounder.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Backgrounder.prototype.initialize = function() {
      this.destroy();
      this.scene = this.get('scene');
      this.camera = this.get('camera');
      this.on('change:shown', function(model, value, obj) {
        return model.trigger({
          "true": 'show',
          "false": 'hide'
        }[value], model);
      });
      this.on('show', function(model) {
        var mesh;
        if (!(mesh = model.get('mesh'))) {
          mesh = model._generateMesh();
          model.set({
            mesh: mesh
          });
        }
        if (model.scene && mesh) {
          return model.scene.add(mesh);
        }
      });
      this.on('change:mesh', function(model, value, obj) {
        if (model.scene) {
          if (model.previous('mesh')) {
            return model.scene.remove(model.previous('mesh'));
          }
        }
      });
      this.on('hide', function(model) {
        var m;
        if (model.scene && (m = model.get('mesh'))) {
          return model.scene.remove(m);
        }
      });
      this.on('change:color', function(model, value, obj) {
        var m;
        if (m = model.get('mesh') && model.get('mesh').material) {
          return model.get('mesh').material.color = value;
        }
      });
      if (this.get('shown') === void 0) {
        return this.show();
      }
    };

    Backgrounder.prototype.destroy = function() {
      this.trigger('destroy');
      this.trigger('hide');
      this.scene = this.camera = void 0;
      return Backgrounder.__super__.destroy.call(this);
    };

    Backgrounder.prototype._generateGeometry = function() {
      var geometry;
      geometry = new THREE.PlaneGeometry(300, 120);
      THREE.GeometryUtils.center(geometry);
      return geometry;
    };

    Backgrounder.prototype._generateMaterial = function() {
      new THREE.MeshBasicMaterial({
        color: this.getColor()
      });
      return new THREE.ShaderMaterial(THREE.BgPendingChaosShader);
    };

    Backgrounder.prototype._generateMesh = function() {
      var mesh;
      mesh = new THREE.Mesh(this.geometry || this._generateGeometry(), this.material || this._generateMaterial());
      mesh.position.x = 0;
      mesh.position.y = 0;
      mesh.position.z = this.camera.position.z - 150;
      return mesh;
    };

    Backgrounder.prototype._defaultColor = function() {
      return 0xffff00;
    };

    Backgrounder.prototype.randomizeColor = function() {
      var clr, hsl, mesh;
      if (this.get('color')) {
        clr = this.get('color').clone();
      }
      if (mesh = this.get('mesh')) {
        clr || (clr = mesh.material.color);
      }
      clr || (clr = this._defaultColor());
      hsl = clr.getHSL();
      clr.setHSL(Math.random(), hsl.s, hsl.l);
      return this.set({
        color: clr
      });
    };

    Backgrounder.prototype.getColor = function() {
      return this.get('color') || this._defaultColor();
    };

    Backgrounder.prototype.hide = function() {
      return this.set({
        shown: false
      });
    };

    Backgrounder.prototype.show = function() {
      return this.set({
        shown: true
      });
    };

    Backgrounder.prototype.update = function(opts) {
      var mesh;
      if (opts.time && (mesh = this.get('mesh'))) {
        return mesh.material.uniforms.time.value = opts.time * 100;
      }
    };

    return Backgrounder;

  })(Backbone.Model);

}).call(this);
