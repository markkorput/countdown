// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Backgrounder = (function(_super) {
    __extends(Backgrounder, _super);

    function Backgrounder() {
      _ref = Backgrounder.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Backgrounder.prototype.initialize = function() {
      this.destroy();
      this.scene = this.get('scene');
      this.camera = this.get('camera');
      this.on('change:shown', function(model, value, obj) {
        return model.trigger({
          "true": 'show',
          "false": 'hide'
        }[value], model);
      });
      this.on('show', function(model) {
        var mesh;
        if (!(mesh = model.get('mesh'))) {
          mesh = model.allMeshes()[0];
          return model.set({
            mesh: mesh
          });
        }
      });
      this.on('change:mesh', function(model, value, obj) {
        if (model.scene) {
          if (model.previous('mesh')) {
            model.scene.remove(model.previous('mesh'));
          }
          return model.scene.add(value);
        }
      });
      this.on('hide', function(model) {
        var m;
        if (model.scene && (m = model.get('mesh'))) {
          return model.scene.remove(m);
        }
      });
      if (this.get('shown') === void 0) {
        return this.show();
      }
    };

    Backgrounder.prototype.destroy = function() {
      this.trigger('destroy');
      this.trigger('hide');
      this.scene = this.camera = void 0;
      return Backgrounder.__super__.destroy.call(this);
    };

    Backgrounder.prototype._generateGeometry = function() {
      var geometry;
      geometry = new THREE.PlaneGeometry(300, 120);
      THREE.GeometryUtils.center(geometry);
      return geometry;
    };

    Backgrounder.prototype._generateMaterials = function() {
      var materials;
      return materials = _.map(this.get('shaders') || [THREE.BgPendingChaosShader], function(shader) {
        return new THREE.ShaderMaterial(shader);
      });
    };

    Backgrounder.prototype._generateMeshes = function() {
      var _this = this;
      return _.map(this._generateMaterials(), function(material) {
        var mesh;
        mesh = new THREE.Mesh(_this.geometry || _this._generateGeometry(), material);
        mesh.position.x = 0;
        mesh.position.y = 0;
        mesh.position.z = _this.camera.position.z - 150;
        return mesh;
      });
    };

    Backgrounder.prototype.allMeshes = function() {
      return this._all_meshes || (this._all_meshes = this._generateMeshes());
    };

    Backgrounder.prototype.randomize = function() {
      return this.set({
        mesh: _.sample(this.allMeshes())
      });
    };

    Backgrounder.prototype.hide = function() {
      return this.set({
        shown: false
      });
    };

    Backgrounder.prototype.show = function() {
      return this.set({
        shown: true
      });
    };

    Backgrounder.prototype.update = function(opts) {
      var mesh;
      this.show();
      if (opts.time && (mesh = this.get('mesh'))) {
        return mesh.material.uniforms.time.value = opts.time * 100;
      }
    };

    return Backgrounder;

  })(Backbone.Model);

}).call(this);
