// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Count = (function(_super) {
    __extends(Count, _super);

    function Count() {
      _ref = Count.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Count.prototype.initialize = function() {
      this.destroy();
      this.scene = this.get('scene');
      this.camera = this.get('camera');
      this.randomizeColor();
      this.on('change:shown', function(model, value, obj) {
        return model.trigger({
          "true": 'show',
          "false": 'hide'
        }[value], model);
      });
      this.on('show', function(model) {
        var mesh;
        if (!(mesh = model.get('mesh'))) {
          mesh = model._generateMesh();
          model.set({
            mesh: mesh
          });
        }
        if (model.scene && mesh) {
          return model.scene.add(mesh);
        }
      });
      this.on('change:mesh', function(model, value, obj) {
        if (model.scene) {
          if (model.previous('mesh')) {
            return model.scene.remove(model.previous('mesh'));
          }
        }
      });
      this.on('hide', function(model) {
        var m;
        if (model.scene && (m = model.get('mesh'))) {
          return model.scene.remove(m);
        }
      });
      this.on('change:color', function(model, value, obj) {
        var m;
        if (m = model.get('mesh') && model.get('mesh').material) {
          return model.get('mesh').material.color = value;
        }
      });
      if (this.get('shown') === void 0) {
        return this.hide();
      }
    };

    Count.prototype.destroy = function() {
      this.trigger('destroy');
      this.hide();
      this.scene = this.camera = void 0;
      return Count.__super__.destroy.call(this);
    };

    Count.prototype._generateGeometry = function() {
      var geometry;
      geometry = new THREE.TextGeometry('' + (this.get('text') || 0), {
        size: 40,
        height: 5,
        curveSegments: 30,
        font: "helvetiker",
        weight: "bold",
        style: "normal",
        bevelSize: 1,
        bevelEnabled: true
      });
      THREE.GeometryUtils.center(geometry);
      return geometry;
    };

    Count.prototype._generateMaterial = function() {
      return new THREE.MeshBasicMaterial({
        color: this.getColor()
      });
    };

    Count.prototype._generateMesh = function() {
      var mesh;
      mesh = new THREE.Mesh(this.geometry || this._generateGeometry(), this.material || this._generateMaterial());
      mesh.position.x = 0;
      mesh.position.y = 0;
      mesh.position.z = this.camera.position.z - 120;
      return mesh;
    };

    Count.prototype._defaultColor = function() {
      return new THREE.Color(255, 255, 255);
    };

    Count.prototype.randomizeColor = function() {
      var clr, hsl, mesh;
      if (this.get('color')) {
        clr = this.get('color').clone();
      }
      if (mesh = this.get('mesh')) {
        clr || (clr = mesh.material.color);
      }
      clr || (clr = this._defaultColor());
      hsl = clr.getHSL();
      clr.setHSL(Math.random(), hsl.s, hsl.l);
      return this.set({
        color: clr
      });
    };

    Count.prototype.getColor = function() {
      return this.get('color') || this._defaultColor();
    };

    Count.prototype.hide = function() {
      return this.set({
        shown: false
      });
    };

    Count.prototype.show = function() {
      return this.set({
        shown: true
      });
    };

    return Count;

  })(Backbone.Model);

  this.CountOps = (function(_super) {
    __extends(CountOps, _super);

    function CountOps() {
      _ref1 = CountOps.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    CountOps.prototype.initialize = function() {
      this.target = this.get('target');
      this.target.on('destroy', this.destroy, this);
      this.target.on('show', this._initializeSpinscale, this);
      return this.target.on('show', this._initializeFall, this);
    };

    CountOps.prototype.destroy = function() {
      this.trigger('destroy', this);
      return this.target = void 0;
    };

    CountOps.prototype.hide = function() {
      return this.target.hide();
    };

    CountOps.prototype._initializeSpinscale = function(target) {
      var randY, randZ;
      this.spinscale_data = {};
      this.spinscale_data.rotY = this.spinscale_data.rotZ = Math.PI * 0.5;
      this.spinscale_data.deltaRotY = this.spinscale_data.deltaRotZ = Math.PI * -0.5;
      randY = Math.random() > 0.5;
      if ((target.get('text') + '') === '1' || (target.get('text') + '') === '7') {
        randZ = randY;
      } else {
        randZ = Math.random() > 0.5;
      }
      if (randY > 0.5) {
        this.spinscale_data.rotY = this.spinscale_data.rotY * -1;
        this.spinscale_data.deltaRotY = this.spinscale_data.deltaRotY * -1;
      }
      if (randZ > 0.5) {
        this.spinscale_data.rotZ = this.spinscale_data.rotZ * -1;
        this.spinscale_data.deltaRotZ = this.spinscale_data.deltaRotZ * -1;
      }
      this.spinscale_data.scale = 5;
      return this.spinscale_data.deltaScale = 1 - this.spinscale_data.scale;
    };

    CountOps.prototype.spinscale = function(progress) {
      var mesh, p, ry, rz, s;
      this.target.show();
      if (!this.spinscale_data) {
        this._initializeSpinscale(this.target);
      }
      if (progress < 0.1 || progress > 0.9) {
        ry = this.spinscale_data.rotY;
        rz = this.spinscale_data.rotZ;
        s = this.spinscale_data.scale;
      } else {
        p = (progress - 0.1) / 0.8;
        ry = this.spinscale_data.rotY + Math.sin(p * Math.PI) * this.spinscale_data.deltaRotY;
        rz = this.spinscale_data.rotZ + Math.sin(p * Math.PI) * this.spinscale_data.deltaRotZ;
        s = this.spinscale_data.scale + Math.sin(p * Math.PI) * this.spinscale_data.deltaScale;
      }
      mesh = this.target.get('mesh');
      mesh.rotation.y = ry;
      mesh.rotation.z = rz;
      return mesh.scale = new THREE.Vector3(s, s, s);
    };

    CountOps.prototype._initializeFall = function(target) {
      var randY, randZ;
      this.fall_data = {};
      this.fall_data.rotY = this.fall_data.rotZ = Math.PI * 0.5;
      this.fall_data.endRotY = this.fall_data.endRotZ = 0;
      randY = Math.random() > 0.5;
      if ((target.get('text') + '') === '1' || (target.get('text') + '') === '7') {
        randZ = randY;
      } else {
        randZ = Math.random() > 0.5;
      }
      if (randY > 0.5) {
        this.fall_data.endRotY = this.fall_data.endRotY * -1;
      }
      if (randZ > 0.5) {
        this.fall_data.endRotZ = this.fall_data.endRotZ * -1;
      }
      this.fall_data.startScale = 5;
      return this.fall_data.endScale = 0.001;
    };

    CountOps.prototype.fall = function(progress) {
      var mesh, p, ry, rz, s;
      this.target.show();
      if (!this.fall_data) {
        this._initializeFall(this.target);
      }
      if (progress < 0.1) {
        s = this.fall_data.startScale;
        ry = this.fall_data.rotY;
        rz = this.fall_data.rotZ;
      } else if (progress > 0.9) {
        s = this.fall_data.endScale;
        ry = this.fall_data.endRotY;
        ry = this.fall_data.endRotZ;
      } else {
        p = 1 - Math.sin((progress - 0.1) / 0.8 * Math.PI * 0.5 + Math.PI * 0.5);
        s = this.fall_data.startScale + (this.fall_data.endScale - this.fall_data.startScale) * p;
        ry = this.fall_data.rotY + (this.fall_data.endRotY - this.fall_data.rotY) * p;
        rz = this.fall_data.rotZ + (this.fall_data.endRotZ - this.fall_data.rotZ) * p;
      }
      mesh = this.target.get('mesh');
      mesh.rotation.y = ry;
      mesh.rotation.z = rz;
      return mesh.scale = new THREE.Vector3(s, s, s);
    };

    return CountOps;

  })(Backbone.Model);

}).call(this);
