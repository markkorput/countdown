// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Count = (function(_super) {
    __extends(Count, _super);

    function Count() {
      _ref = Count.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Count.prototype.initialize = function() {
      this.destroy();
      this.scene = this.get('scene');
      this.camera = this.get('camera');
      this.sourceRotation = Math.PI * 0.5;
      this.deltaRotation = Math.PI * -0.5;
      if (Math.random() > 0.5) {
        this.sourceRotation = this.sourceRotation * -1;
        this.deltaRotation = this.deltaRotation * -1;
      }
      this.sourceScale = 5;
      this.deltaScale = -4;
      this.on('change:shown', function(model, value, obj) {
        return model.trigger({
          "true": 'show',
          "false": 'hide'
        }[value], model);
      });
      this.on('show', function(model) {
        model.set({
          mesh: this._generateMesh()
        });
        return model._randomizeColor();
      });
      this.on('change:mesh', function(model, value, obj) {
        if (model.scene) {
          return model.scene.add(value);
        }
      });
      this.on('hide', function(model) {
        var m;
        if (model.scene && (m = model.get('mesh'))) {
          return model.scene.remove(m);
        }
      });
      if (this.get('shown') === void 0) {
        return this.hide();
      }
    };

    Count.prototype.destroy = function() {
      this.trigger('destroy');
      this.hide;
      this.scene = this.camera = void 0;
      return Count.__super__.destroy.call(this);
    };

    Count.prototype._generateGeometry = function() {
      var geometry;
      geometry = new THREE.TextGeometry('' + (this.get('text') || 0), {
        size: 40,
        height: 5,
        curveSegments: 30,
        font: "helvetiker",
        weight: "bold",
        style: "normal",
        bevelSize: 1,
        bevelEnabled: true
      });
      THREE.GeometryUtils.center(geometry);
      return geometry;
    };

    Count.prototype._generateMaterial = function() {
      return new THREE.MeshBasicMaterial({
        color: 0xFF0000
      });
    };

    Count.prototype._generateMesh = function() {
      var mesh;
      mesh = new THREE.Mesh(this.geometry || this._generateGeometry(), this.material || this._generateMaterial());
      mesh.position.x = 0;
      mesh.position.y = 0;
      mesh.position.z = this.camera.position.z - 120;
      return mesh;
    };

    Count.prototype._randomizeColor = function(mesh) {
      var clr;
      if (!(mesh || (mesh = this.get('mesh')))) {
        return;
      }
      clr = mesh.material.color.getHSL();
      return mesh.material.color.setHSL(Math.random(), clr.s, clr.l);
    };

    Count.prototype.hide = function() {
      return this.set({
        shown: false
      });
    };

    Count.prototype.show = function(progress) {
      var mesh, p, r, s;
      this.set({
        shown: true
      });
      if (!(mesh = this.get('mesh'))) {
        return;
      }
      if (progress < 0.1 || progress > 0.9) {
        p = progress;
        r = this.sourceRotation;
        s = this.sourceScale;
      } else {
        p = (progress - 0.1) / 0.8;
        r = this.sourceRotation + Math.sin(p * Math.PI) * this.deltaRotation;
        s = this.sourceScale + Math.sin(p * Math.PI) * this.deltaScale;
      }
      mesh.rotation.y = r;
      mesh.rotation.z = r;
      return mesh.scale = new THREE.Vector3(s, s, s);
    };

    return Count;

  })(Backbone.Model);

}).call(this);
